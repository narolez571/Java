allprojects { projects ->
    defaultTasks 'clean', 'build'
}

task wrapper(type: Wrapper) {
    description = "Generates gradlew scripts for NIX and win envs"
    gradleVersion = '1.6'
}

subprojects { subprojects ->

    apply from: "$rootDir/gradle/libraries.gradle"
    apply from: "$rootDir/gradle/ide.gradle"
    apply plugin: 'java'

    buildDir = 'target'
    version = '1.0-SNAPSHOT'
    group = 'org.suggs.sandbox'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext.genDir = "$buildDir/generated-src"
    sourceSets.main.java.srcDirs += genDir

    configurations {
        xjc
    }

    task xjc(dependsOn: processResources) {
        doLast {

            file(genDir).mkdirs()

            ant.taskdef(
                    name: 'xjc',
                    classname: 'com.sun.tools.xjc.XJCTask',
                    classpath: configurations.xjc.asPath)

            sourceSets.main.output.resourcesDir.eachFileMatch(~/.*\.xsd/) { File file ->
                def fileName = file.name.split("\\.")[0]
                ant.xjc(destdir: genDir,
                        schema: "$sourceSets.main.output.resourcesDir/${fileName}.xsd",
                        binding: "$sourceSets.main.output.resourcesDir/${fileName}.xjb")

            }
        }
    }

    dependencies {
        xjc libs.jaxb_xjc

        compile libs.slf4jApi

        runtime libs.slf4jLog4j,
                libs.log4j

        testCompile libs.test.junit,
                libs.test.mockito
    }
}

project("sandbox:guice") {
    dependencies {
    }
}

project("sandbox:hibernate") {
    dependencies {
        compile libs.hibernate.core

        runtime libs.spring.context,
                libs.commons.dbcp,
                libs.hsqldb

        testCompile libs.spring.test,
                libs.spring.orm,
                libs.test.mtc
    }
}

project("sandbox:jaxb") {
    subprojects {
        compileJava.dependsOn xjc
    }
}

project("sandbox:jms") {
    dependencies {
        compile libs.jms

        testCompile libs.activemq
    }
}

project("sandbox:jmx") {
    dependencies {
        compile libs.jini,
                libs.jmxtools

    }
}

project("sandbox:oddsandsods") {
    dependencies {
        compile libs.log4j
    }

}

project("sandbox:patterns") {
    dependencies {
        testCompile libs.spring.test,
                libs.spring.context
    }
}

project("sandbox:spring") {
    dependencies {
        compile libs.spring.jdbc
        libs.spring.context

        testCompile libs.spring.context

        runtime libs.commons.dbcp,
                libs.hsqldb
    }
}

project("sandbox:test") {
    dependencies {
        testCompile libs.test.mtc
        testCompile(libs.test.makeiteasy) { exclude group: "junit" }
    }
}

project("sandbox:tibco") {
    dependencies {
        compile libs.tibjmsadmin

        runtime libs.jms,
                libs.tibjms
    }

}
